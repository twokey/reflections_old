Question: What happens when you initialize a repository? Why do you need to do it?

Answer: When I initialized a repository Git created system folder where it keeps
track of all changes of that directory. However, before Git starts tracking one should
add files to track.

Question: How is the staging area different from the working directory and the 
repository? What value do you think it offers?

Answer: Staging area is a virtual intermidiate space where you can add your files
before making commit. In this way you can precisely control what files you want 
to controll.

Question: How can you use the staging area to make sure you have one commit 
per logical change?

Answer: I can use staging area to add there only those files, which are
related to the logical change. In this way I can work on several changes
simultaneusly, and later form them into separate commits by dividing into
utilizing staging area.

Question: What are some situations when branches would be helpful in keeping
your history organized? How would branches help?

Answer: Branches can be helpful when I want to try to develop a new feature
or test some new ideas, but at the same time to keep orginal version of the
project intact. This can be helpful for example if I decide to develop
a version of my software in different language (!)

Question: How do the diagrams help you visualize the branch structure?

Answer: Using diagrams I can understand branch structures better in many ways.
I can see how each commit is related to the other commits and how it can be
reached from them. Also I should be carefull checking out commits,
because I can lost current changes I've just made.

Question: What is the result of merging two branches together? Why do we 
represent it in the diagram the way we do?

Answer: Result of merging two branches together is a new commit, which includes
changes from two last commits from these two branches. Now it looks like two
branches merged together and this is what actually happened. 

Question: What are the pros and cons of Gitâ€™s automatic merging vs. always 
doing merges manually?

Answer: Automatic merging saves time and very convenient when there are not 
many changes and they done in different parts of the file. Meanwhile,
manual merging provides more controll over the proces. However it can take
more time to resolve all conflicts.
